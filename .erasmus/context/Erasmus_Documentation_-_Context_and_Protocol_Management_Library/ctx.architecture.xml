<Architecture> 
  <Title>Erasmus Documentation - Context and Protocol Management Library</Title>
  <Overview>
    <Title>Erasmus Documentation - Context and Protocol Management Library</Title>
    <Description>Erasmus is a context and protocol management library with Model Context Protocol (MCP) integration. As of v0.2.0, it features:
- Comprehensive protocol and context management with reusable templates
- IDE environment setup for Windsurf, Cursor, Codex, and Claude
- A packager that bundles the system and dependencies into a universal installer (bash + uv + extracted Python)
- Release workflow that outputs both .py and .sh installers
- All core modules and CLI are documented or in the process of being documented with docstrings and comments

This provides a robust, testable, and maintainable solution for modern development context and protocol management. The codebase now requires comprehensive docstrings and comments throughout for maintainability and onboarding.
</Description>
  </Overview>
  
  <CoreComponents>
    <Component name="Path Management">
      <Purpose>Centralized path management for different IDE environments</Purpose>
      <Features>
        <Feature>IDE environment detection from environment variables</Feature>
        <Feature>Interactive IDE selection when environment variable is not set</Feature>
        <Feature>Consistent path structure across different IDEs</Feature>
        <Feature>Automatic directory and file creation</Feature>
        <Feature>Symlink management for cross-IDE compatibility</Feature>
      </Features>
      <Implementation>
        <Detail>PathMngrModel for managing all paths</Detail>
        <Detail>IDE enum with metadata for each supported IDE</Detail>
        <Detail>Environment variable detection with fallback to user input</Detail>
        <Detail>Singleton pattern for global path access</Detail>
      </Implementation>
      <SupportedIDEs>
        <IDE>
          <Name>Windsurf</Name>
          <RulesFile>.windsurfrules</RulesFile>
          <GlobalRulesPath>~/.codeium/windsurf/memories/global_rules.md</GlobalRulesPath>
          <SymlinkToCursor>true</SymlinkToCursor>
        </IDE>
        <IDE>
          <Name>Cursor</Name>
          <RulesFile>.cursorrules</RulesFile>
          <GlobalRulesPath>~/.cursor/global_rules.md</GlobalRulesPath>
          <SymlinkToCursor>false</SymlinkToCursor>
        </IDE>
        <IDE>
          <Name>Codex</Name>
          <RulesFile>codex.md</RulesFile>
          <GlobalRulesPath>~/.codex/instructions.md</GlobalRulesPath>
          <SymlinkToCursor>false</SymlinkToCursor>
        </IDE>
        <IDE>
          <Name>Claude</Name>
          <RulesFile>CLAUDE.md</RulesFile>
          <GlobalRulesPath>~/.claude/CLAUDE.md</GlobalRulesPath>
          <SymlinkToCursor>false</SymlinkToCursor>
        </IDE>
      </SupportedIDEs>
      <Tasks>
        <Task>Implement PathMngrModel for centralized path management</Task>
        <Task>Define IDE enum with metadata for each IDE</Task>
        <Task>Implement environment variable detection logic</Task>
        <Task>Prompt user for IDE selection if variable not set</Task>
        <Task>Ensure consistent directory structure and auto-create missing paths</Task>
        <Task>Implement symlink logic for cross-IDE compatibility</Task>
        <Task>Write unit tests for all path management logic</Task>
      </Tasks>
    </Component>
    <Component name="Environment Management">
      <Purpose>Generic, type-safe environment variable management</Purpose>
      <Features>
        <Feature>Dynamic variable definition (required/optional)</Feature>
        <Feature>Strong type validation</Feature>
        <Feature>Value constraints (min/max, patterns)</Feature>
        <Feature>Custom validation functions</Feature>
        <Feature>File-based loading (.env)</Feature>
        <Feature>System environment loading</Feature>
        <Feature>Configuration merging</Feature>
      </Features>
      <Implementation>
        <Detail>EnvironmentConfig class for managing variables</Detail>
        <Detail>VariableDefinition for type and constraint definitions</Detail>
        <Detail>Comprehensive validation system</Detail>
        <Detail>Error handling with proper logging</Detail>
      </Implementation>
    </Component>
    <Component name="File Monitor Service">
      <Purpose>Monitors changes in ctx.architecture.md, ctx.progress.md, and ctx.tasks.md and applies the changes to .windsurfrules and/or .cursorrules files</Purpose>
      <Responsibilities>
        <Responsibility>Watch for changes in architecture, progress, and tasks files</Responsibility>
        <Responsibility>Update rules file when changes are detected</Responsibility>
        <Responsibility>Maintain file system event listeners</Responsibility>
      </Responsibilities>
      <Implementation>
        <Detail>Uses watchdog for file system events</Detail>
        <Detail>Efficient event handling</Detail>
        <Detail>Robust error recovery</Detail>
      </Implementation>
    </Component>
    <Component name="Context Manager">
      <Purpose>Manages development context files</Purpose>
      <Responsibilities>
        <Responsibility>Save/load context files to/from .erasmus/context directory</Responsibility>
        <Responsibility>Parse and sanitize document names</Responsibility>
        <Responsibility>Ensure ASCII-only characters</Responsibility>
        <Responsibility>Handle file operations safely</Responsibility>
      </Responsibilities>
      <Implementation>
        <Detail>Safe file operations</Detail>
        <Detail>Content sanitization</Detail>
        <Detail>Error handling</Detail>
      </Implementation>
    </Component>
    <Component name="Protocol Handler">
      <Purpose>Manages protocol definitions</Purpose>
      <Responsibilities>
        <Responsibility>Add protocols to context objects</Responsibility>
        <Responsibility>Preserve existing content</Responsibility>
        <Responsibility>Load/save protocols from/to .erasmus/protocol folder</Responsibility>
      </Responsibilities>
      <Implementation>
        <Detail>Protocol validation</Detail>
        <Detail>Content preservation</Detail>
        <Detail>File operations</Detail>
      </Implementation>
    </Component>
    <Component name="MCP Integration">
      <Purpose>Model Context Protocol management</Purpose>
      <SubComponents>
        <SubComponent>
          <Name>Registry Manager</Name>
          <Detail>Load from JSON configuration</Detail>
          <Detail>Server registration</Detail>
        </SubComponent>
        <SubComponent>
          <Name>Client Implementation</Name>
          <Detail>Python SDK integration</Detail>
          <Detail>Request handling</Detail>
        </SubComponent>
        <SubComponent>
          <Name>Server Implementation</Name>
          <Detail>CLI mirroring</Detail>
          <Detail>Request processing</Detail>
        </SubComponent>
      </SubComponents>
    </Component>
    <Component name="CLI Interface">
      <Purpose>User interaction layer</Purpose>
      <Responsibilities>
        <Responsibility>Context management</Responsibility>
        <Responsibility>Protocol management</Responsibility>
        <Responsibility>MCP server management</Responsibility>
      </Responsibilities>
    </Component>
  </CoreComponents>
  
  <DevelopmentPrinciples>
    <Principle name="Testing Strategy">
      <Detail>Unit tests for each component</Detail>
      <Detail>Integration tests for component interaction</Detail>
      <Detail>End-to-end tests for CLI operations</Detail>
      <Detail>Mock external dependencies</Detail>
      <Detail>Test coverage requirements: 80% minimum</Detail>
    </Principle>
    <Principle name="Code Quality">
      <Detail>Type hints throughout</Detail>
      <Detail>Comprehensive documentation</Detail>
      <Detail>Error handling with proper logging</Detail>
      <Detail>Clean code principles</Detail>
      <Detail>KISS (Keep It Simple, Stupid) approach</Detail>
    </Principle>
    <Principle name="Configuration Management">
      <Detail>Centralized path management</Detail>
      <Detail>Environment variable handling</Detail>
      <Detail>No hardcoded values</Detail>
      <Detail>Configuration validation</Detail>
      <Detail>IDE environment detection</Detail>
    </Principle>
    <Principle name="Error Handling">
      <Detail>Graceful degradation</Detail>
      <Detail>Detailed error logging</Detail>
      <Detail>User-friendly error messages</Detail>
      <Detail>Recovery mechanisms</Detail>
    </Principle>
    <Principle name="Data Modeling">
      <Detail>Use Pydantic models for serializable data structures</Detail>
      <Detail>Use NamedTuple for simple, immutable data structures</Detail>
      <Detail>Modern type hints (lowercase list, dict, | for union)</Detail>
      <Detail>Type safety throughout the codebase</Detail>
    </Principle>
  </DevelopmentPrinciples>
  
  <Dependencies>
    <Dependency>Python 3.8+</Dependency>
    <Dependency>loguru</Dependency>
    <Dependency>modelcontextprotocol/python-sdk | mcp[cli]</Dependency>
    <Dependency>pytest (testing)</Dependency>
    <Dependency>typer (CLI)</Dependency>
    <Dependency>watchdog (file monitoring)</Dependency>
  </Dependencies>
  
  <DirectoryStructure>
    <Directory>
      <Path>erasmus/</Path>
      <SubDirectory>
        <Path>.erasmus/</Path>
        <Description>Library working files</Description>
        <SubDirectory>
          <Path>protocol/</Path>
          <Description>Protocol definitions</Description>
        </SubDirectory>
        <SubDirectory>
          <Path>context/</Path>
          <Description>Context Folders</Description>
          <SubDirectory>
            <Path>{context_name}/</Path>
            <Description>Labeled by name</Description>
            <File>
              <Name>ctx.architecture.md</Name>
              <Description>Architecture doc</Description>
            </File>
            <File>
              <Name>ctx.progress.md</Name>
              <Description>Progress doc</Description>
            </File>
            <File>
              <Name>ctx.tasks.md</Name>
              <Description>Tasks doc</Description>
            </File>
          </SubDirectory>
        </SubDirectory>
      </SubDirectory>
      <SubDirectory>
        <Path>src/</Path>
        <SubDirectory>
          <Path>monitor/</Path>
          <Description>File monitoring</Description>
        </SubDirectory>
        <SubDirectory>
          <Path>context/</Path>
          <Description>Context management</Description>
        </SubDirectory>
        <SubDirectory>
          <Path>protocol/</Path>
          <Description>Protocol handling</Description>
        </SubDirectory>
        <SubDirectory>
          <Path>logging/</Path>
          <Description>Logging system</Description>
        </SubDirectory>
        <SubDirectory>
          <Path>mcp/</Path>
          <Description>MCP integration</Description>
        </SubDirectory>
        <SubDirectory>
          <Path>cli/</Path>
          <Description>Command line interface</Description>
        </SubDirectory>
      </SubDirectory>
      <SubDirectory>
        <Path>tests/</Path>
        <Description>Test suite</Description>
      </SubDirectory>
      <SubDirectory>
        <Path>config/</Path>
        <Description>Configuration files</Description>
      </SubDirectory>
      <File>
        <Name>.cursorrules | .windsurfrules</Name>
        <Description>Rules file and injected context</Description>
      </File>
      <File>
        <Name>.ctx.architecture.xml</Name>
        <Description>Monitored design doc</Description>
      </File>
      <File>
        <Name>.ctx.progress.xml</Name>
        <Description>Monitored development schedule</Description>
      </File>
      <File>
        <Name>.ctx.tasks.xml</Name>
        <Description>Monitored task list</Description>
      </File>
    </Directory>
  </DirectoryStructure>
  
  <DevelopmentWorkflow>
    <Step>Component selection from PROGRESS.md</Step>
    <Step>Task breakdown in TASKS.md</Step>
    <Step>Test-driven development</Step>
    <Step>Code review</Step>
    <Step>Integration testing</Step>
    <Step>Documentation update</Step>
  </DevelopmentWorkflow>
</Architecture>
